#include <stdio.h>
#include <stdlib.h>

// Define a structure for a linked list node
struct Node {
    int data;
    struct Node* next;
};

// Function to create a new node with given data
struct Node* createNode(int data) {
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    newNode->data = data;
    newNode->next = NULL;
    return newNode;
}

// Function to insert a node at the nth position in a linked list
struct Node* insertNodeAtNth(struct Node* head, int data, int position) {
    struct Node* newNode = createNode(data);

    // Insert at the beginning if position is 1 or less
    if (position <= 1) {
        newNode->next = head;
        return newNode;
    }

    struct Node* current = head;
    int count = 1;

    // Traverse to the (position - 2)th node
    while (count < position - 1 && current != NULL) {
        current = current->next;
        count++;
    }

    if (current != NULL) {
        // Insert the new node
        newNode->next = current->next;
        current->next = newNode;
    } else {
        // If position is greater than the length of the list, insert at the end
        while (current->next != NULL) {
            current = current->next;
        }
        current->next = newNode;
    }

    return head;
}

// Function to print the linked list
void printLinkedList(struct Node* head) {
    struct Node* current = head;

    while (current != NULL) {
        printf("%d -> ", current->data);
        current = current->next;
    }

    printf("NULL\n");
}

int main() {
    // Creating a sample linked list: 1 -> 2 -> 3 -> NULL
    struct Node* head = createNode(1);
    head->next = createNode(2);
    head->next->next = createNode(3);

    printf("Original Linked List: ");
    printLinkedList(head);

    // Inserting a node with data 4 at position 2
    head = insertNodeAtNth(head, 4, 2);

    printf("Linked List after insertion: ");
    printLinkedList(head);

    return 0;
}
