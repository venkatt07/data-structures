#include <stdio.h>
#include <stdlib.h>

// Define a structure for the stack
struct Stack {
    int *array;
    int top;
    int capacity;
};

// Function to initialize the stack
struct Stack *createStack(int capacity) {
    struct Stack *stack = (struct Stack *)malloc(sizeof(struct Stack));
    stack->array = (int *)malloc(capacity * sizeof(int));
    stack->top = -1;
    stack->capacity = capacity;
    return stack;
}

// Function to check if the stack is empty
int isEmpty(struct Stack *stack) {
    return (stack->top == -1);
}

// Function to check if the stack is full
int isFull(struct Stack *stack) {
    return (stack->top == stack->capacity - 1);
}

// Function to push an element onto the stack
void push(struct Stack *stack, int value) {
    if (isFull(stack)) {
        printf("Stack overflow. Cannot push %d\n", value);
        return;
    }

    stack->array[++stack->top] = value;
}

// Function to pop an element from the stack
int pop(struct Stack *stack) {
    if (isEmpty(stack)) {
        printf("Stack underflow. Cannot pop\n");
        return -1; // Error value for an empty stack
    }

    return stack->array[stack->top--];
}

// Function to implement a queue using two stacks
struct MyQueue {
    struct Stack *stack1; // For pushing elements
    struct Stack *stack2; // For popping elements
};

// Function to initialize the queue
struct MyQueue *createQueue(int capacity) {
    struct MyQueue *queue = (struct MyQueue *)malloc(sizeof(struct MyQueue));
    queue->stack1 = createStack(capacity);
    queue->stack2 = createStack(capacity);
    return queue;
}

// Function to push an element onto the queue
void push(struct MyQueue *queue, int value) {
    push(queue->stack1, value);
}

// Function to pop an element from the queue
int pop(struct MyQueue *queue) {
    if (isEmpty(queue->stack2)) {
        while (!isEmpty(queue->stack1)) {
            push(queue->stack2, pop(queue->stack1));
        }
    }

    return pop(queue->stack2);
}

// Function to get the front element of the queue
int peek(struct MyQueue *queue) {
    if (isEmpty(queue->stack2)) {
        while (!isEmpty(queue->stack1)) {
            push(queue->stack2, pop(queue->stack1));
        }
    }

    if (!isEmpty(queue->stack2)) {
        return queue->stack2->array[queue->stack2->top];
    }

    return -1; // Error value for an empty queue
}

// Function to check if the queue is empty
int empty(struct MyQueue *queue) {
    return isEmpty(queue->stack1) && isEmpty(queue->stack2);
}

int main() {
    struct MyQueue *myQueue = createQueue(10);

    push(myQueue, 1);
    push(myQueue, 2);
    printf("Front element: %d\n", peek(myQueue)); // Output: 1
    printf("Removed element: %d\n", pop(myQueue)); // Output: 1
    printf("Is the queue empty? %s\n", empty(myQueue) ? "true" : "false"); // Output: false

    return 0;
}
